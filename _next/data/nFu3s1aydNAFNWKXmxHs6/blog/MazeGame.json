{"pageProps":{"frontMatter":{"title":"MazeGame","subtitle":"A JavaFX Puzzle Game with Dynamic Mazes and BFS Solver","type":"undergrad","description":"MazeGame is a Java-based puzzle game featuring a goose navigating dynamic mazes with autosolve functionality using BFS. Includes CLI and GUI modes with asset integrity checks.","keywords":"MazeGame, Java game, JavaFX, maze solver, BFS algorithm, Java CLI, game development, Java multithreading, Java GUI, puzzle game, intro to Java project, object-oriented programming","github":"https://github.com/smp46/MazeGame","date":"2025-05-13","created":"2024-11-22","updated":"2025-05-13","readingTime":"2 min read","wordCount":282,"minutes":2},"mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"mazegame-a-javafx-puzzle-game-with-dynamic-mazes-and-bfs-solver\",\n      children: \"MazeGame: A JavaFX Puzzle Game with Dynamic Mazes and BFS Solver\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a game I completed in my Intro to Java class. I went far beyond what\\nthey asked of us, so here it is.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A goose named Sir Wobbleton is stuck in a dynamically loaded maze (of your\\nchoosing), you must get him out (or simply press 'Q' and allow the maze solver\\nto solve the maze). Mazes can be loaded from any file that matches the given\\nformat (Theoretically can be infinitely big). The game also can be loaded in\\nthree different ways: CLI mode, GUI no-asset mode, and GUI asset mode. Due to\\nlicensing, I cannot include the asset folder in the source code, however do not\\nworry I implemented an MD5 checksum check to verify all assets before\\ndisplaying. If the assets don't match the checksum, the game will work just\\nfine. Checkout below.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_Assets.gif\",\n        alt: \"Demo\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"notable-features\",\n      children: \"Notable Features:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Breadth First Solver, because any maze (matching the spec) can be loaded, BFS\\nis utilised to autosolve any possible maze.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dynamic texture loading, using MD5 hashing the game can identify if assets are\\nmissing and/or incorrect and switch to an asset-free mode.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dynamic texture picking, I pain stakingly matched every possible maze wall\\nposition to the right texture so Sir Wobbleton and his maze will always look\\ngood.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Object Oriented design, both the GUI and CLI utilise the very same game\\nframework for modularity and ease of use.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Multithreaded optimisation, the BFS maze solver runs on a dedicated thread to\\nprevent slowdowns when launching the game.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"game-controls\",\n      children: \"Game Controls:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"WASD\"\n        }), \" for movement.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"Q\"\n        }), \" to autosolve maze.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"H\"\n        }), \" to enable path highlighting.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"three-exciting-game-modes\",\n      children: \"Three Exciting Game Modes:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"cli-mode\",\n      children: \"CLI Mode\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/CLI.png?q=85\",\n        alt: \"cli medium maze\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"gui-no-assets-mode\",\n      children: \"GUI No-Assets Mode\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_No_Assets.png?q=85\",\n        alt: \"gui medium maze no-asset\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"gui-assets-mode\",\n      children: \"GUI Assets Mode\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_Assets.png?q=85\",\n        alt: \"gui medium maze\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"launching-the-game\",\n      children: \"Launching the Game\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"JavaFX library is required.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Developed and tested with JDK 17.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Command line arguments should be passed to the Launcher.class file in this\\nformat:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"java Launcher [CLI or GUI] [relative dir of maze file]\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So for example to load the GUI with the medium maze:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"java Launcher GUI src/maps/maze002.txt\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"creating-your-own-mazes\",\n      children: \"Creating Your Own Mazes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you want to make your own mazes, here is the specification the maze files\\nmust match:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The maze's dimensions must be in the file's first line in the form of two\\nintegers, both must be odd numbers to ensure the maze has an external wall and\\ninternal paths.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The remaining maze attributes have to be provided in the following char\\nconfigurations:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Walls - \", _jsx(_components.code, {\n              children: \"#\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Traversable Paths - \", _jsx(_components.code, {\n              children: \"' '\"\n            }), \" or \", _jsx(_components.code, {\n              children: \".\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Start Point - \", _jsx(_components.code, {\n              children: \"S\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"End Point - \", _jsx(_components.code, {\n              children: \"E\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So the text file of the small maze shown above looks like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"7 7\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"#######\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"#S#   #\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# ### #\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# #   #\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# # # #\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"#   #E#\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"#######\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feel free to contribute, suggest improvements, or report bugs!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If anyone is interested, I'd be happy figure out how to release a compiled jar\\nincluding the assets.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"MazeGame","subtitle":"A JavaFX Puzzle Game with Dynamic Mazes and BFS Solver","type":"undergrad","description":"MazeGame is a Java-based puzzle game featuring a goose navigating dynamic mazes with autosolve functionality using BFS. Includes CLI and GUI modes with asset integrity checks.","keywords":"MazeGame, Java game, JavaFX, maze solver, BFS algorithm, Java CLI, game development, Java multithreading, Java GUI, puzzle game, intro to Java project, object-oriented programming","github":"https://github.com/smp46/MazeGame","date":"2025-05-13","created":"2024-11-22","updated":"2025-05-13"}}},"__N_SSG":true}