{
    "version": "https://jsonfeed.org/version/1",
    "title": "smp46",
    "home_page_url": "https://smp46.me",
    "feed_url": "https://cdn.statically.io/gh/smp46/smp46.github.io/nextjs/public/feeds/feed.json",
    "description": "Projects, attempts and other things",
    "author": {
        "name": "smp46",
        "url": "https://smp46.me/whoami"
    },
    "items": [
        {
            "id": "https://smp46.me/blog/FileFerry",
            "content_html": "<p><img src=\"https://cdn.statically.io/gh/smp46/FileFerry/main/public/favicon/web-app-manifest-192x192.png\" alt=\"Flow Chart\"></p>\n<h1>FileFerry: Building a Secure, Peer-to-Peer File Sharing App from Scratch</h1>\n<h2>Motivation</h2>\n<p>I'm a big fan and user of the file-sharing utility\n<a href=\"https://github.com/magic-wormhole/magic-wormhole\">magic-wormhole</a>. An\neasy-to-use utility that allows you to transfer a folder or file between any two\ndevices running a magic-wormhole client, using a phrase to connect. However, the\nclient is, in my opinion, the limiting factor. It is usually a command-line\nutility, requiring both a command line and a computer to run it on. Although it\ncan be run through Termux on Android, that's not quite the user experience I'm\nafter. So what if I could bring magic-wormhole to the browser?</p>\n<h2>Initial Idea: Literally Bring Magic-Wormhole to the Browser</h2>\n<p>Being the genius I am (<em>sarcasm</em>) I thought I could literally just bring the\nwormhole-client to the browser. My preferred client is\n<a href=\"https://github.com/psanford/wormhole-william\">wormhole-william</a>, an\nimplementation of magic-wormhole written in Golang. A cool feature of Golang is\nthat anything <em>can</em> be compiled to WASM, WebAssembly. So I thought I could just\nmake a web interface for wormhole-william, compile it to WASM and boom,\nbrowser-based file sharing!</p>\n<p>No, that's not how it works :(</p>\n<h2>Peer-to-Peer in the Browser and its Limitations</h2>\n<p>While WASM is super cool tech, a browser is still a browser. And that means\n<a href=\"https://thenewstack.io/webassembly/case-study-a-webassembly-failure-and-lessons-learned/\">limitations</a>.\nFor today, the important limitation is \"You cannot access the network in an\nunpermissioned way.\" This means the traditional and established method of TCP\nhole-punching to establish direct network connections between two otherwise\nunconnected peers doesn't work. I guess this is understandable, but it did throw\na spanner in the works. Magic-wormhole works <em>exclusively</em> via TCP\nhole-punching, a fact I discovered only after building a basic prototype in the\nbrowser.</p>\n<p>So what can you do in the browser?</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\">WebSockets</a>\nand <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API\">WebRTC</a> are\nwhat you can do in the browser. WebSockets are our equivalent of a basic TCP\nstream in the browser. The WebSockets API \"makes it possible to open a two-way\ninteractive communication session between the user's browser and a server.\"\nWhich sounds pretty neat, I'm going to need to make some connections beyond HTTP\nrequests. And WebRTC \"enables Web applications and sites to ... exchange\narbitrary data between browsers without requiring an intermediary.\" Sounds like\nexactly what I would need for a browser-based file sharing application, how\neasy. With WebSockets for creating streams and WebRTC as our transfer protocol,\nall it needs is some magic to get the direct connection.</p>\n<h2>The (Imperfect) Magic: libp2p</h2>\n<blockquote>\n<p>libp2p is an open source networking library used by the world's most important\ndistributed systems such as Ethereum, IPFS, Filecoin, Optimism and countless\nothers. There are native implementations in Go, Rust, <strong>Javascript</strong>, C++,\nNim, Java/Kotlin, Python, .Net, Swift and Zig. It is the simplest solution for\nglobal scale peer-to-peer networking and includes support for pub-sub message\npassing, distributed hash tables, <strong>NAT hole punching and browser-to-browser\ndirect communication.</strong></p>\n</blockquote>\n<p>Libp2p is what I used to build FileFerry, and it is awesome. As a whole, libp2p\nis a specification for bringing together a lot of cool networking technologies\ninto a single framework. And look right there in the blurb it says it supports\nJavascript, hole punching and direct browser-to-browser communication.</p>\n<p>Okay, so the scope of the project has increased a little... but it seems I have\nthe tools to make my browser-based alternative to magic-wormhole.</p>\n<h2>Building FileFerry with js-libp2p</h2>\n<p>This has been a long journey, and let's just say I'm glad Neovim doesn't keep\ntrack of usage by number of hours.</p>\n<h3>Wrangling js-libp2p</h3>\n<p>While js-libp2p does handle the magic, it isn't exactly simple nor\nstraightforward. I started with this\n<a href=\"https://github.com/libp2p/js-libp2p-example-webrtc-private-to-private/\">webrtc browser-to-browser example</a>\nand went from there. Unfortunately, while libp2p has some cool built-in\nprotocols like gossip-sub for chat apps. It <em>doesn't</em> offer a file transfer protocol, so that was my job to\nimplement. But in theory if I can get a stream, I should be able to just push\nsome data through it, save it on the other end and boom, file-sharing done.\nWell, in a perfect world maybe, but I found WebSockets and WebRTC isn't exactly\ntailored to shoving large amounts of data through a stream as fast as possible.\nConnection stability was a gigantic headache, connections <em>will</em> drop and\nhandling that is a pain.</p>\n<h3>Complete Transfers over Incomplete Connections</h3>\n<p>The general idea seemed easy, if I just track at an application level how far\nthrough a file transfer the app is then if a connection drops, it can reconnect\nand keep on going. And that's how I started. But there are issues:</p>\n<ul>\n<li>How do we know when to reconnect?</li>\n<li>How do we know that the data arrived all in one piece?</li>\n<li>What if the Sender gets ahead of the Receiver?</li>\n</ul>\n<p>To address the first issue, I implemented a Connection Management class that\nkeeps track of, handles and directs connections. I also made it the Sender's job\nto reconnect upon connection loss. It sounds simple now, but working out how the\nspecific implementation required a lot of reading of the\n<a href=\"https://github.com/libp2p/specs\">libp2p spec</a>, reading the\n<a href=\"https://github.com/libp2p/js-libp2p\">source code</a> and trial and error.</p>\n<p>The second issue was much easier, and dare I say fun. Hashing to produce a\nchecksum. Now most hashing I can think of works by taking a complete file and\nprocessing it all at once. But only the Sender has a complete file, at least\nuntil the transfer is done. Instead of having the Receiver process the whole\nfile again and hash it after receiving, I decided I could do it during the\ntransfer. I could do it during the transfer, this way it would be less of an\nissue if the connection dropped as well. So I picked an algorithm I had actually\nused in the Algorithms and Datastructures class I took at uni, FNV1a because it\nis\n<a href=\"https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633\">very fast and relatively secure</a>.\nOkay so now the Sender makes the initial checksum part of the file header and\nthe Receiver can compare its final result against it. Another issue down.</p>\n<p>The final issue, I also solved thanks to some networking basics I was taught at\nuni. The stream behaves like a UDP connection, you can write and read data to it\nbut who is to say whether that data did or didn't arrive. So I thought what if I\ntook a page from TCP and implemented an <em>ACK</em>nowledgement system. Basically,\nevery 200 chunks the Sender will stop sending and wait for the Receiver to send\nan acknowledgement that it has received the last batch. This helped especially\nwhen connection drop-outs occurred, often the sender would reconnect and keep\nblasting data while the receiver is still trying to catch up.</p>\n<h3>A (Poorly Made) Overview</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/fileferry/flowchart.webp\" alt=\"Flow Chart\"></p>\n<h3>The UI</h3>\n<p>The nautical theme was picked mostly because I was looking for something\ninteresting. As I'm not a UI designer, it felt easier to make something a little\ndifferent. The site uses purely HTML/Typescript/TailwindCSS. And I'm not ashamed\nto admit Claude Opus was definitely the lead CSS designer, I thought it was\npretty incredible the stuff it can come up with purely in CSS. Zero pre-rendered\nassets (images) are used, it's all CSS, SVGs and text.</p>\n<h3>The Backend</h3>\n<p>To bring it all together, I self-host two of the three required back-end\nservers:</p>\n<ul>\n<li><strong>The Passphrase Server</strong>: A simple API that provides access to a database. A\nsender can make a POST request with a key value pair of their passphrase (the\nkey) and their public peer address (the value). A receiver, with a shared\npassphrase, can then make a GET request (with the passphrase) and receive the\nSender's peer address. The database entry is then immediately deleted.</li>\n<li><strong>WebRTC Necessities</strong>: For a more detailed explanation of exactly how these\ntwo servers come into play I suggest\n<a href=\"https://www.cloudflare.com/learning/video/turn-server/\">this article</a>. But\nsimply put:\n<ul>\n<li><strong>The CoTURN Server</strong>: The fallback relay that is used if a direct\nconnection can't be made between two clients.\n<a href=\"https://github.com/coturn/coturn\">Coturn</a> is just an open source\nimplementation that I utilised for this project.</li>\n<li><strong>The STUN Servers</strong>: These are public external services that help with\nclient discoverability and establishing direct connections with WebRTC. As\nthese use very little bandwith, there are many publicly available. I used\n<a href=\"https://github.com/pradt2/always-online-stun\">this list</a> and my own\n<a href=\"https://github.com/smp46/geoip-api\">fork of a GeoIP API</a> to retrieve the\nthree geographically closest STUN servers to the client.</li>\n</ul>\n</li>\n</ul>\n<h2>The Result: A Demo</h2>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/fileferry/output.gif\" alt=\"Demo\"></p>\n<p>Visit <a href=\"https://fileferry.xyz\">fileferry.xyz</a> to try it yourself!</p>\n<h2>To Conclude</h2>\n<p>This turned into a really fun and challenging project, and has definitely\ninspired me to work further with the libp2p framework in the future. Due to the\ncomplexity of the project I spent a long time getting into the weeds, reading\nand trying to understand the source code of js-libp2p. I ran into many problems\nthat neither Google nor ChatGPT could help me with, which made it a very\nrewarding project to complete.</p>\n<p>But for now, I am finished with FileFerry and will enjoy my new easy way to\nshare files in the browser.</p>\n",
            "url": "https://smp46.me/blog/FileFerry",
            "title": "FileFerry",
            "summary": "FileFerry is a browser-based, peer-to-peer file sharing application that allows for secure, direct file transfers between any two browsers. Inspired by the command-line utility magic-wormhole, it uses WebRTC and the libp2p library. The project implement a custom protocol for reliable transfers over unstable connections, including checksum validation and an acknowledgement system, built with TypeScript and TailwindCSS.",
            "date_modified": "2025-06-23T00:00:00.000Z",
            "date_published": "2025-06-23T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/SmartGarage",
            "content_html": "<h1>SmartGarage: A DIY Wireless Garage Door Control System with a Side of Machine Learning</h1>\n<h2>Introduction</h2>\n<p>One day my friend Howie was over and he saw me open my garage door. Naturally he\ngot out the Flipper Zero he always carries in his bag and asks I use my garage\ndoor fob again, he captures and resends it easily. I thought that was odd,\nshouldn't there be, I don't know, maybe at least rolling codes on any modern\ngarage door opener. But I was inspired and thought if it's that easy surely I\ncould automate that with some lower cost hardware.</p>\n<p>So I get thinking and I come up with the project you're reading right now. To\ncreate a system to remotely open and close my garage door without physically\nmodifying the opener itself (I live in a rental so unfortunately this was a\nrequirement). But hey that doesn't sound very ambitious and the year is 2024, so\nI have to to add aRtIFicIAlL inTELiGeNce in here somewhere. In all seriousness,\noften I leave the house and five minutes later start wondering if I did close my\ngarage door. So what if instead of wondering I could just check my\n<a href=\"https://gethomepage.dev/\">homepage</a> dashboard, or even get an email\nnotification if the garage door has been open too long. And how can I check if\nthe door is open or not without wiring anything in, easy, I'll just train an\nimage recognition model that can tell me just that.</p>\n<p>This project ended up combining hardware hacking, machine learning, and a web\ninterface to create a practical solution using nothing but off the shelf (or the\ninternet) parts and a bit of coding elbow grease.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/1.jpg?q=85&#x26;f=webp\" alt=\"Final Result\"></p>\n<p>It's hard to show a teaser of the final result because it has so many parts, but\nhere is what was the hardest part of the solution (I swear it's not a bomb).</p>\n<h2>Initial Attempts and Challenges</h2>\n<p>I started with the hard part, how do I clone the garage door fob signal and\nresend it on command. The fob uses the 433MHz band for transmission. I happened\nto have a Raspberry Pi Zero W sitting in my drawer, so I go online and find the\nTexas Instruments CC1101 Sub-GHz transceiver (the same chip that is used by the\nFlipper Zero). This should let me capture the signal and sent it right on back.\nMore searching and I see there's plenty of drivers and other projects for this\ntransceiver so it can't be that hard to use right. I order one, a breadboard and\na wiring kit to put it together.</p>\n<p>As soon as I got it, I started trying to cobble something together, I try a\n<a href=\"https://github.com/SpaceTeddy/CC1101\">CC1101 driver library</a>, I find\n<a href=\"https://github.com/fphammerle/python-cc1101\">a python interface for it even</a>.\nBut I don't have much luck.</p>\n<p>I get to the stage where I can receive some kind of signal, however to be honest\nI know nothing about radio and I'm only a CompSci student not an electrical\nengineer. Even though it is the same chip used by the Flipper Zero, there seems\nto be fair bit of special sauce that goes into being able to pull a signal out\nof the air cleanly, then resend it. Documentation for the drivers didn't make\nmuch sense to me, if there was any at all. So after weeks of trying I decide to\npivot to another approach (definitely not a skill issue... okay maybe a little).</p>\n<p>So I have a crack at the other side of the project, training an image\nrecognition model to tell me if the door is open or not. I start with getting\nthe cheapest wireless security camera I can find off of chinese marketplace\nnumber 508 (<a href=\"banggood.com\">banggood.com</a>), configuring my firewall to never let\nit phone home (block all its internet access) and begin collecting data.</p>\n<p>To do this I write a\n<a href=\"https://gist.github.com/smp46/638484a6b0d3d1695666b6c678657ab9\">Bash script for fetching security camera snapshots</a>,\nand make it into a systemd service on my Debian home server. A few weeks later\nand I have hundreds of thousands of photos that can be categorised as open or\nclosed.</p>\n<p>I spent a while then doing some research on how exactly this whole machine\nlearning stuff works. I decided on making something with PyTorch. A little later\nand some long discussions with Professor GPT I have\n<a href=\"https://github.com/smp46/SmartGarage/tree/ac813584dbb65167c8f29fbdaa52849de34d0e04\">two python scripts</a>.\nThe first lets me add my own training data onto the MobileNetV2 model (a\nlightweight neural network designed for mobile devices) and configure it to\nprovide a binary output, the second loads my custom model, takes the input of a\npicture and outputs: \"Opened or Closed\". Neat! However, knowing my garage door\nwas actually left open doesn't really help me if I can't remotely close it.</p>\n<p>A little over a year goes by, life goes on, and my garage remains dumb :(</p>\n<p>However, recently while procrastinating some other programming assignments I\nremembered this project. And I thought, if a fob can open and close the door,\nmaybe I can just automate pressing the button on the fob. Sometimes the simplest\nsolutions are the ones staring you right in the face all along...</p>\n<h2>The Hardware Hack</h2>\n<p>So I ordered a couple of generic garage door fobs off eBay that were compatible\nwith my opener. After adding them to the garage door (following the actual\nprocess in the manual), I started thinking about how I could simulate a button\npress with my Raspberry Pi Zero W.</p>\n<p>Now, I'm not an electrical engineer by any stretch, but I figured how\ncomplicated could a fob be. I carefully cracked open one of the generic fobs and\nexamined the PCB. After some poking around with a multimeter, I discovered the\nbutton on the fob just bridges two contacts on the PCB. If I could find a way to\nbridge those contacts on command from the Pi, I'd be cooking.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/3.jpg?q=85&#x26;f=webp\" alt=\"fob_contacts\"></p>\n<p>Here is the naked fob and the contacts I needed to bridge.</p>\n<p>After some research, I figured out I needed:</p>\n<ul>\n<li><a href=\"https://www.jaycar.com.au/arduino-compatible-5v-relay/p/XC4419\"><strong>Arduino Compatible 5V Relay</strong></a>\n<ul>\n<li>This allows me to use the GPIO on the Pi to send a high signal, which can\nthen bridge the circuit. As the Pi can't \"bridge\" but it can send high low\nsignals.</li>\n</ul>\n</li>\n<li><a href=\"https://www.jaycar.com.au/220-ohm-0-5-watt-metal-film-resistors-pack-of-8/p/RR0556\"><strong>220 Ohm 0.5 Watt Resistor</strong></a>\n<ul>\n<li>This prevents the unlikely chance of the Relay drawing too much current and\ncooking my Pi (in the bad way).</li>\n</ul>\n</li>\n<li>Some wires to connect everything together (I used the ones that came with my\nbreadboard kit)</li>\n<li>A bit of soldering skill (which I do not have)</li>\n</ul>\n<p>Here's the circuit I ended up with:\n<img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/circuit.webp?q=85\" alt=\"circuit_diagram\"></p>\n<p>I soldered two thin wires to the contact points either side of the fob's button,\nran them to the relay, and connected everything according to the diagram above.\nThe idea is simple: when GPIO pin 17 goes high, it activates the relay, which\nbridges the contacts on the fob, which sends the signal to open/close the garage\ndoor.</p>\n<p>To test, I put together\n<a href=\"https://gist.github.com/smp46/d68ac357b1ac97062de757412eb9bc09\">a basic python script</a>\nthat makes GPIO17 high for half a second. And shockingly, the door opens.\nYippee!</p>\n<p>You might be wondering what sleek professional way I put this all together:\n<img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/4.jpg?q=85&#x26;f=webp\" alt=\"final_circuit\">\nI'm honestly not sure what the correct way to package something like this is, am\ndefinitely open to feedback if anyone has any better ideas.</p>\n<h2>Teaching My Computer to See</h2>\n<p>After getting the hardware working, I needed to tackle the \"smart\" part of my\nSmartGarage: teaching a computer to recognize whether my garage door was open or\nclosed from camera images. This meant dabbling in machine learning—specifically,\ncomputer vision.</p>\n<h4>Data Collection: The Boring Bit</h4>\n<p>Honestly, this was the hardest and most tedious part of making the image\nrecognition model. In order to train an accurate model, I needed a lot of data\nand I needed it categorised.</p>\n<p>So I used that\n<a href=\"https://gist.github.com/smp46/638484a6b0d3d1695666b6c678657ab9\">bash script</a>\nthat saves a picture every minute, or every second during \"peak times\" i.e.\ntimes when the door is mostly likely to be open, to collect a lot of data.</p>\n<p>The result:</p>\n<pre><code class=\"language-bash\">$ ls ~/garage/training_imgs | wc -l\n158332\n</code></pre>\n<p>Now that might look nice - more data is more better right? Not quite. When\ntraining a model I discovered a <em>good dataset</em> is a <em>balanced dataset</em>. And\nbalance is difficult when most of the time the garage door is not open. To\nremedy this I made that bash script collect more often when the door might be\nopen and used a\n<a href=\"https://gist.github.com/smp46/b92a8b312fcd92632b4b6de99c9d8af7\">python script</a>\nthat creates a lot of permutations of the same pictures.</p>\n<p>But how do you categorise all those pictures? Slowly and manually...</p>\n<p>The specific software I use is <a href=\"https://www.xnview.com/en/xnviewmp/\">XnView MP</a>\nwhich is just a more effecient image library manager with support for batch\nrenaming. That and moving the data set to a RAMdisk while I'm working with it\nhelped speed things up. As turns out handling over 150 thouseand ~20Kb files\nisn't super easy. Here's a snapshot of the exciting action:</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/sorting.gif\" alt=\"sorting_gif\"></p>\n<h4>The Training Process</h4>\n<p>During my first attempt at this project, I put together\n<a href=\"https://github.com/smp46/SmartGarage/tree/ac813584dbb65167c8f29fbdaa52849de34d0e04\">a set of Python scripts</a>\nusing the MobileNetV2 model with PyTorch. For this revival, I upgraded to\nMobileNetV3, which is meant to be better overall without needing additional\ncompute, and made some adjustments to optimize the images for training.</p>\n<h6>Why the MobileNet Model?</h6>\n<p>I picked MobileNet predominantly because it's designed for mobile\ndevices—meaning it's not very computationally expensive. This is important as\nthe model needs to run against an image every 10 seconds, 24/7.</p>\n<p>Also, I only have access to my Radeon 6950XT for training, which is a nice\ngaming GPU but in the world of AI, it's not particularly powerful. I tried\ntraining with the ConvNeXtV2 model (a much newer and heavier model), and the\ntraining was estimated to take 125 hours to complete. MobileNetV3, by\ncomparison, takes less than 45 minutes even with ~140,000 images in the dataset.</p>\n<h6>How do Those Scripts Work?</h6>\n<p>Click the Githhub icon on this page to view the project itself and all the code.</p>\n<p>But the workflow looks a little like this, I clone the repo, mount it alongside\nthe training images in the\n<a href=\"https://rocm.docs.amd.com/projects/install-on-linux/en/develop/install/3rd-party/pytorch-install.html\">PyTorch docker container</a>\nand do something like this:</p>\n<pre><code class=\"language-bash\">root@docker:/train# python3 binaryTrainer.py train\nEnter the path to the training images: /train/training_imgs_sorted/\nWhat is the object you are trying to classify? Garage Door\nEnter the classification names separated by a comma: open,closed\nEnter the model name to save as: may10_bigdata_10_epochs\nEnter the number of epochs: 10\n</code></pre>\n<p>The output of that model will be a file called <code>may10_bigdata_10_epochs.pth</code> and\na <code>config.ini</code>, this contains the additional training data needed for\npredictions and the configuration for the other script <code>justPredict.py</code>. That\nsecond script allows me to just pass it a file:</p>\n<pre><code class=\"language-bash\">root@docker:/train# python3 justPredict.py testing_imgs/garage5.jpg\nopen\n</code></pre>\n<h6>Can I Give it a Go?</h6>\n<p>Please! I tried making the script fairly user-friendly, mostly so I don't have\nto remember the intricacies when I want to update / train a new model.\nCurrently, it is limited to a binary output i.e. a True or False classification.\nBut it does have some nice features like a progress bar and stopping training\nwhen it detects accuracy loss.</p>\n<p>Was all this ML stuff necessary? Probably not. Was there a simpler way to\nachieve this? Absolutely. But where's the fun in that? Plus, I learned a fair\nbit about machine learning in the process, which was kind of the point.</p>\n<h2>Putting It All Together</h2>\n<p>With the hardware and machine learning components working, I needed a way to tie\neverything together into a cohesive system. Let me illustrate the architecture\nand then I can explain why this is a perfectly sane project (and not at all an\novercomplicated solution to a problem that probably has a $20 commercial\nalternative):</p>\n<h6>Architecture</h6>\n<p>The system follows a microservices approach, with each component handling a\nspecific responsibility and communicating via HTTP APIs. The Rust HTTP server\nruns on the Pi Zero W, the rest is running on my homeserver both in and out of\nDocker containers.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/software.webp?q=85\" alt=\"software_architecture\"></p>\n<h5>The Components</h5>\n<h6><a href=\"https://github.com/smp46/SmartGarage/tree/main/garage_door_api\"><strong>Rust HTTP API Server</strong></a></h6>\n<p>Initially this was just another Python FastAPI, but I switched to Rust, using\nAxum Server, because it needs to be running 24/7 and I don't want my poor little\nPi Zero W running too hard. The server listens on port <code>3000</code> for a POST request\nto the <code>/toggle</code> endpoint with the correct authorisation token, when received it\ntriggers the button on the fob and the door opens or closes.</p>\n<h6><a href=\"https://github.com/smp46/SmartGarage/blob/main/garage-img.sh\"><strong>Fetch Video Snapshot Bash Script</strong></a></h6>\n<p>Every second a script retrieves a snapshot of the garage security camera feed\nand saves this to a RAM-disk. A RAM-disk is used to prevent excessive wear and\ntear from constant writes to the system drive. A custom systemd service is used\nto trigger this every second, as crontab is limited to once per minute.</p>\n<h6><a href=\"https://github.com/smp46/SmartGarage/blob/main/image_recognition/garage_monitor.py\"><strong>Image Recognition Script</strong></a></h6>\n<p>This is a variant of <code>justPredict.py</code> script mentioned before, except it reads a\nfile from a specified path and sends its results to the Garage Door Status API.\nAgain, I use a custom systemd service to keep this script running and restart it\non boot.</p>\n<h6><a href=\"https://github.com/smp46/SmartGarage/blob/main/status_api/app/main.py\"><strong>Garage Door Status API</strong></a></h6>\n<p>Super simple Python HTTP API server, using FastAPI, that receives and stores the\ngarage door status from the Image Recognition Script and updates its internal\nlast_opened state if the status changes from closed to open. And then responds\nwith this data in a JSON response when a POST request is sent to\n<code>http://garage-api:5000/status</code>.</p>\n<h6><a href=\"https://gist.github.com/smp46/37efd7d30b2980b4553c148d08c0b969\"><strong>Homepage Custom API Widget</strong></a></h6>\n<p>This widget lives on my homepage and provides the snapshot from the camera, the\nstatus of the door as reported by the Garage Door Status API and the time it was\nlast opened. The preview is using an iframe that just displays the snapshot\nimage, where the iframe html is mounted to the homepage docker container.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/homepage_widget.webp?q=85\" alt=\"widget_preview\"></p>\n<h6><a href=\"https://github.com/smp46/SmartGarage/blob/main/garage_notifs.sh\"><strong>Email Notification Service</strong></a></h6>\n<p>This is a bash script that is run every minute with crontab. It checks the\nStatus API for the current status and the last opened status, if it is currently\nopen and the last opened was more than 10 minutes ago it sends a friendly email\nwith a link to the website to close it.</p>\n<h6><a href=\"https://github.com/smp46/SmartGarage/tree/main/website\"><strong>SmartGarage Control Website</strong></a></h6>\n<p>This website provides the snapshot of the security camera and has a button that\nsends a POST request through an nginx proxy to the Rust HTTP API Server on the\nPi. The website is hosted via nginx through a Cloudflare Tunnel, using Google\nSSO it is protected against unwanted visitors.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/website.webp?q=85\" alt=\"website\"></p>\n<h2>The Result</h2>\n<h6>But at What Cost?</h6>\n<p>Not too much actually, if we ignore how many hours I put into this, and there's\na few things leftover / will be used when I do something similar again.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Component</th>\n<th align=\"right\">Cost (AUD)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Raspberry Pi Zero W</td>\n<td align=\"right\">$25.00</td>\n</tr>\n<tr>\n<td align=\"left\">Pi GPIO Pins and Case</td>\n<td align=\"right\">$8.00</td>\n</tr>\n<tr>\n<td align=\"left\">Generic Garage Door Fob</td>\n<td align=\"right\">$8.00</td>\n</tr>\n<tr>\n<td align=\"left\">5V Relay</td>\n<td align=\"right\">$8.00</td>\n</tr>\n<tr>\n<td align=\"left\">220 Ohm 0.5 Watt Resistors</td>\n<td align=\"right\">$0.85</td>\n</tr>\n<tr>\n<td align=\"left\">Soldering Iron kit</td>\n<td align=\"right\">$45.00</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Total</strong></td>\n<td align=\"right\"><strong>$94.85</strong></td>\n</tr>\n</tbody>\n</table>\n<h6>To Conclude</h6>\n<p>After several months of development, testing, and refinement, I'm happy to\nreport that my SmartGarage system has been running reliably for over a month\nnow. The system successfully:</p>\n<ul>\n<li>Allows me to remotely open and close my garage door from anywhere with\ninternet access</li>\n<li>Detects the door's open/closed state with reasonable accuracy</li>\n<li>Sends me notifications if I've left the door open for more than 10 minutes</li>\n<li>Provides a remotely accessible, nearly real-time view of my garage through via\nthe camera</li>\n</ul>\n<p>Here's a demo of it in action:\n<img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/smartgarage/demo.webp\" alt=\"demo\"></p>\n",
            "url": "https://smp46.me/blog/SmartGarage",
            "title": "SmartGarage",
            "summary": "SmartGarage is a custom-built IoT solution that enables remote garage door control without modifying the original opener. Using a Raspberry Pi, relay circuit, and machine learning image recognition, it provides door status monitoring, remote operation, and automated notifications—all built with off-the-shelf components.",
            "date_modified": "2025-05-14T00:00:00.000Z",
            "date_published": "2025-05-11T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/MazeGame",
            "content_html": "<h1>MazeGame: A JavaFX Puzzle Game with Dynamic Mazes and BFS Solver</h1>\n<p>This is a game I completed in my Intro to Java class. I went far beyond what\nthey asked of us, so here it is.</p>\n<p>A goose named Sir Wobbleton is stuck in a dynamically loaded maze (of your\nchoosing), you must get him out (or simply press 'Q' and allow the maze solver\nto solve the maze). Mazes can be loaded from any file that matches the given\nformat (Theoretically can be infinitely big). The game also can be loaded in\nthree different ways: CLI mode, GUI no-asset mode, and GUI asset mode. Due to\nlicensing, I cannot include the asset folder in the source code, however do not\nworry I implemented an MD5 checksum check to verify all assets before\ndisplaying. If the assets don't match the checksum, the game will work just\nfine. Checkout below.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_Assets.gif\" alt=\"Demo\"></p>\n<h3>Notable Features:</h3>\n<ul>\n<li>Breadth First Solver, because any maze (matching the spec) can be loaded, BFS\nis utilised to autosolve any possible maze.</li>\n<li>Dynamic texture loading, using MD5 hashing the game can identify if assets are\nmissing and/or incorrect and switch to an asset-free mode.</li>\n<li>Dynamic texture picking, I pain stakingly matched every possible maze wall\nposition to the right texture so Sir Wobbleton and his maze will always look\ngood.</li>\n<li>Object Oriented design, both the GUI and CLI utilise the very same game\nframework for modularity and ease of use.</li>\n<li>Multithreaded optimisation, the BFS maze solver runs on a dedicated thread to\nprevent slowdowns when launching the game.</li>\n</ul>\n<h3>Game Controls:</h3>\n<ul>\n<li><em>WASD</em> for movement.</li>\n<li><em>Q</em> to autosolve maze.</li>\n<li><em>H</em> to enable path highlighting.</li>\n</ul>\n<h2>Three Exciting Game Modes:</h2>\n<h3>CLI Mode</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/CLI.png?q=85\" alt=\"cli medium maze\"></p>\n<h3>GUI No-Assets Mode</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_No_Assets.png?q=85\" alt=\"gui medium maze no-asset\"></p>\n<h3>GUI Assets Mode</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/mazegame/GUI_Assets.png?q=85\" alt=\"gui medium maze\"></p>\n<h2>Launching the Game</h2>\n<ul>\n<li>JavaFX library is required.</li>\n<li>Developed and tested with JDK 17.</li>\n</ul>\n<p>Command line arguments should be passed to the Launcher.class file in this\nformat:</p>\n<p><code>java Launcher [CLI or GUI] [relative dir of maze file]</code></p>\n<p>So for example to load the GUI with the medium maze:</p>\n<p><code>java Launcher GUI src/maps/maze002.txt</code></p>\n<h2>Creating Your Own Mazes</h2>\n<p>If you want to make your own mazes, here is the specification the maze files\nmust match:</p>\n<ul>\n<li>The maze's dimensions must be in the file's first line in the form of two\nintegers, both must be odd numbers to ensure the maze has an external wall and\ninternal paths.</li>\n<li>The remaining maze attributes have to be provided in the following char\nconfigurations:\n<ul>\n<li>Walls - <code>#</code></li>\n<li>Traversable Paths - <code>' '</code> or <code>.</code></li>\n<li>Start Point - <code>S</code></li>\n<li>End Point - <code>E</code></li>\n</ul>\n</li>\n</ul>\n<p>So the text file of the small maze shown above looks like this:</p>\n<pre><code>7 7\n#######\n#S#   #\n# ### #\n# #   #\n# # # #\n#   #E#\n#######\n</code></pre>\n<p>Feel free to contribute, suggest improvements, or report bugs!</p>\n<p>If anyone is interested, I'd be happy figure out how to release a compiled jar\nincluding the assets.</p>\n",
            "url": "https://smp46.me/blog/MazeGame",
            "title": "MazeGame",
            "summary": "MazeGame is a Java-based puzzle game featuring a goose navigating dynamic mazes with autosolve functionality using BFS. Includes CLI and GUI modes with asset integrity checks.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2024-11-22T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/PortfolioWebsite",
            "content_html": "<h1>Building My Developer Portfolio with Next.js, MDX, and GitHub Actions</h1>\n<p>This is the website you're on right now! It covers an intro to my projects (like\nthis one) and a little about who I am.</p>\n<h2>Features</h2>\n<ul>\n<li>Written in Typescript with NextJS/React.</li>\n<li>Fully dynamic will scale (well) to most devices.</li>\n<li>Website is entirely statically generated.</li>\n<li>Articles (projects) are written in MDX format and get compiled automatically\nas a Github workflow.</li>\n</ul>\n<h2>How the Markdown stuff works</h2>\n<p>Painfully! It was a lot of banging my head against the wall using various guides\nand resources to reach my goal of <em>easier</em> article creation / updating. What\nended up being the most helpful article was\n<a href=\"https://spacejelly.dev/posts/how-to-source-mdx-content-in-next-js-to-dynamically-create-pages-for-a-blog\">this one by Colby Fayock</a>.</p>\n<p>The end result is a relatively easy way to maintain and add articles/project\nwrite-ups. The process is as simple as:</p>\n<ol>\n<li>Write the article in Markdown(X) and copy it to the src/projects directory.</li>\n<li>Add the required fields to the top of the page, to extract a title and allow\nfor categorising, meta tags etc. For example:</li>\n</ol>\n<pre><code>---\ntitle: \"Portfolio Website\"\nsubtitle: \"Building My Developer Portfolio with Next.js, MDX, and GitHub Actions\"\ntype: \"personal\"\ndescription: \"A fully statically-generated personal portfolio built with Next.js, React, and TypeScript. It showcases projects, articles written in MDX, and a bit about me.\"\nkeywords: \"personal website, portfolio, Next.js, React, TypeScript, static site generation, MDX, GitHub Actions, web development, developer portfolio\"\ngithub: \"https://github.com/smp46/smp46.me\"\n---\n</code></pre>\n<ol start=\"3\">\n<li><code>git add . &#x26;&#x26; git commit</code> And ta-dah, the Github workflow handles the\ncompiling and then it goes live at\n<a href=\"https://smp46.me/projects\">smp46.me/projects</a>.</li>\n</ol>\n<h3>Testing/Building</h3>\n<p>Requirements: <code>npm 10.9.2</code> - ymmv with other versions</p>\n<p>For developing <code>npm run dev</code>, this even works for adding MDX files. Navigating\naway then back to /projects, will refresh and get new files.</p>\n<p>For building/generating a static site <code>npm run build</code>, find the website files in\n/out.</p>\n",
            "url": "https://smp46.me/blog/PortfolioWebsite",
            "title": "Portfolio Website",
            "summary": "A fully statically-generated personal portfolio built with Next.js, React, and TypeScript. It showcases projects, articles written in MDX, and a bit about me.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2025-04-08T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/RightClickVirusTotal",
            "content_html": "<h1>RightClickVirusTotal: Cross-Platform File Scanning with VirusTotal API</h1>\n<p>RightClickVirusTotal is a Python program that provides a simple local interface\nfor the VirusTotal API, via the vt-py library.</p>\n<p>Designed to be add to the Windows context menu, it allows you to easily check\nany files for viruses before running them.</p>\n<p>Now cross-platform! Checkout the latest releases for Windows and Linux specific\nbuilds.</p>\n<p><em>Demo of Windows GUI</em></p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/rcvt/Windows_GUI.gif\" alt=\"Windows_GUI_demo\"></p>\n<p><em>Demo of Universal GUI</em></p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/rcvt/Universal_GUI.gif\" alt=\"universal_gui_demo\"></p>\n<p><em>Screenshot of Universal CLI</em></p>\n<p>There is also now a CLI version, with builds for both Windows and Linux:\n<img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/rcvt/Universal_CLI.webp?q=85\" alt=\"universal_cli_demo\"></p>\n<h2>Key Features</h2>\n<ul>\n<li>Utilizes the VirusTotal API to upload files and retrieve analysis results.</li>\n<li>Displays comprehensive statistics on the file's detection status, including\nharmless, malicious, suspicious, and undetected classifications.</li>\n<li>Built with a user-friendly graphical interface using the Tkinter library.</li>\n</ul>\n<p><strong>Note:</strong> Before using the program, make sure to obtain a valid VirusTotal API\nkey (these are free for basic personal use).</p>\n<h3>Pick the Right Version</h3>\n<p>There are three versions of RightClickVirusTotal, these are:</p>\n<ul>\n<li>Universal_CLI - A Command Line Interface version to be used in the terminal.\nUse this if most of your work is does in a terminal.</li>\n<li>Universal<em>GUI - A Graphical User Interface version that can be used anyway a\nTKinter GUI can be launched, Windows, Linux or OSX. Use this if you want a GUI\nand you're _not</em> using Windows.</li>\n<li>Windows<em>GUI - A Graphical User Inferface version with specific features and\noptimisations for Windows 10/11. Use this if you want a good GUI and _Right\nClick</em> functionality on Windows.</li>\n</ul>\n<h2>Basic Usage Instructions for Windows GUI</h2>\n<p>Unlike the Universal Versions, Windows GUI can be run with no arguments. Opening\nit without arguments and admin permissions will open the program, which will\nthen relaunch and request admin permissions. Then you are presented with two\nwindows that look like this:\n<img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/rcvt/Windows_Instructions.webp?q=85\" alt=\"image\"></p>\n<p>Here you can input your VirusTotal API key, and the program will add a shortcut\n<strong>to the programs current location</strong>, meaning if you move the .exe the shortcut\nwill no longer work, so only do this once you have placed it where you want to\nkeep it, to the Windows Right Click Context Menu like shown in the demo at the\ntop of the page. Then you can launch the program from any folder in file\nexplorer by simply right clicking and selecting <code>Upload to VirusTotal</code>.</p>\n<p>The usage instructions for the Universal Versions below are also valid for the\nWindows GUI.</p>\n<h2>Basic Usage Instructions for Universal Versions</h2>\n<p>Arguments must be provided <em>to get the program to do anything</em>, otherwise a\nusage error will be printed (for the CLI) and program will exit.</p>\n<p>The below example is for the Linux executable, but arguments are provided the\nsame regardless of the platform.</p>\n<p><code>./RightClickVirusTotal_CLI_Universal \"VirusTotalAPIKey\" \"FilePath\"</code></p>\n<p>Ensure you replace the first argument, VirusTotalAPIKey, with your own API key\nand keep the quotation marks to ensure it is passed as a string. Then the second\nargument, FilePath, should be the whole path to the file, again also in quotes.</p>\n<p>For example on Linux:</p>\n<p><code>./RightClickVirusTotal_CLI_Universal \"0010101010101abcdefq\" \"/home/smp/Documents/RightClickVirusTotal/realvirus.txt\"</code></p>\n<h2>Current Issues</h2>\n<ul>\n<li>None known.</li>\n</ul>\n<h2>FAQ</h2>\n<p><strong>Where can I get a VirusTotal API Key?</strong></p>\n<p>Create a free account over at <a href=\"https://www.virustotal.com\">VirusTotal</a>, then\nclick on your profile icon in the top right corner of the homepage, and select\n\"API Key\".</p>\n<p><strong>Why is &#x3C;insert RightClickVirusTotal build name> being detected as a virus by\nmy anti-virus and VirusTotal?</strong></p>\n<p>RightClickVirusTotal is both unsigned and compiled with PyInstaller, so it can\nmatch anti-virus patterns used to detect malware. Unfortunately if it's easy to\nuse for solo-devs it also can be used to make malware. These <em>are false\npositives</em>. If you are concerned at all, please review the source code and build\nit yourself using the instructions below!</p>\n<p><strong>Why do some files take so long to analyse?</strong></p>\n<p>If a file doesn't already exist in the VirusTotal database, it needs to be\nscanned and analysed this can, at times, take up to two minutes or more\ndepending on the file size. It is also a limitation of the free API access, when\na file is being analysed I can only check in with VirusTotal API every 15\nseconds (4 lookups/min).</p>\n<h2>Build Instructions using PyInstaller</h2>\n<p><strong>Made and built using Python 3.11.2</strong></p>\n<h3>Windows GUI</h3>\n<ol>\n<li>\n<p>Open powershell and run <code>pip install pyinstaller tk vt-py asyncio pillow</code></p>\n</li>\n<li>\n<p>Navigate to a directory to store the project in and run\n<code>git clone https://github.com/smp46/RightClickVirusTotal.git ; cd RightClickVirusTotal</code></p>\n</li>\n<li>\n<p>Run the following command to build the executable:\n<code>pyinstaller --onefile --noconsole --icon=imgs/rcvt.ico --add-data=\"imgs/;imgs\" .\\RightClickVirusTotal_GUI_Windows.py</code></p>\n<p>This command instructs PyInstaller to create a single executable file\n(<code>RightClickVirusTotal_GUI_Windows.exe</code>) that contains your program, its\ndependencies and resources.</p>\n</li>\n<li>\n<p>Inside the <code>dist</code> directory, you will find the executable file\n(<code>RightClickVirusTotal_GUI_Windows.exe</code>).</p>\n</li>\n<li>\n<p>Move this file to anywhere you want to 'install' it.</p>\n</li>\n</ol>\n<h3>Universal GUI</h3>\n<ol>\n<li>\n<p>nstall required dependencies with pip\n<code>pip install pyinstaller tk vt-py asyncio ttkthemes</code></p>\n</li>\n<li>\n<p>Navigate to a directory to store the project in and run\n<code>git clone https://github.com/smp46/RightClickVirusTotal.git ; cd RightClickVirusTotal</code></p>\n</li>\n<li>\n<p>Run the following command to build the executable:\n<code>pyinstaller --onefile --noconsole --icon=imgs/rcvt.ico .\\RightClickVirusTotal_GUI_Universal.py</code></p>\n<p>This command instructs PyInstaller to create a single executable file\n(<code>RightClickVirusTotal_GUI_Universal.</code>) that contains your program, its\ndependencies and resources.</p>\n</li>\n<li>\n<p>Inside the <code>dist</code> directory, you will find the executable file\n(<code>RightClickVirusTotal_GUI_Universal</code>).</p>\n</li>\n</ol>\n<h3>Universal CLI</h3>\n<ol>\n<li>\n<p>Install required dependencies with pip\n<code>pip install pyinstaller vt-py colorama</code></p>\n</li>\n<li>\n<p>Navigate to a directory to store the project in and run\n<code>git clone https://github.com/smp46/RightClickVirusTotal.git ; cd RightClickVirusTotal</code></p>\n</li>\n<li>\n<p>Run the following command to build the executable:\n<code>pyinstaller --onefile RightClickVirusTotal_CLI_Universal.py</code></p>\n<p>This command instructs PyInstaller to create a single executable file\n(<code>RightClickVirusTotal_CLI_Universal</code>) that contains your program and its\ndependencies.</p>\n</li>\n</ol>\n",
            "url": "https://smp46.me/blog/RightClickVirusTotal",
            "title": "RightClickVirusTotal",
            "summary": "RightClickVirusTotal is a Python-based tool that adds file virus scanning directly to your context menu via the VirusTotal API. Now available with CLI and GUI for Windows, Linux, and macOS.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2024-11-22T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/StoryPath",
            "content_html": "<h1>StoryPath: A Location-Based Platform for Interactive Tours &#x26; Treasure Hunts</h1>\n<p>StoryPath is a location-based experience platform built for virtual museum\nexhibits, interactive tours, and clue-driven treasure hunts. It includes both a\nReact Web App for creating experiences and a React Native App for exploring them\nin the real world.</p>\n<h3>Tech Stack</h3>\n<p>Frontend Web: React, TypeScript, Vite, Tailwind CSS, Axios</p>\n<p>Mobile App: React Native, TypeScript, Tailwind CSS, Axios, Expo</p>\n<p>Backend: Provided REST API or local JSON Server, ChatGPT API</p>\n<h2>Website</h2>\n<p>The StoryPath web app provides a project creation interface with a REST API\nbackend that gets shared with the app.</p>\n<h3>Features</h3>\n<ul>\n<li>\n<p>Create and manage location-based projects</p>\n</li>\n<li>\n<p>Add Locations to each project, with support for custom content including\nimages for each location.</p>\n</li>\n<li>\n<p>Print unique QR codes for each location for discovery via the mobile app</p>\n</li>\n<li>\n<p>Use a basic Preview Mode to simulate the app experience</p>\n</li>\n<li>\n<p>ChatGPT integration to enhance or get feedback on project content</p>\n</li>\n</ul>\n<h3>Demo</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/storypath/web_demo.webp\" alt=\"StoryPathWebDemo\"></p>\n<h2>Companion App</h2>\n<p>The StoryPath mobile app (React Native) enables users to play experiences\ncreated on the web platform. Once a user creates a profile (locally stored),\nthey can browse available projects and start exploring. Locations are unlocked\nby physically visiting them or scanning the associated QR code. Each discovery\nupdates the user’s score and reveals the next clue.</p>\n<h3>Features</h3>\n<ul>\n<li>\n<p>Create a player profile with name and photo</p>\n</li>\n<li>\n<p>Browse and select from a list of published projects</p>\n</li>\n<li>\n<p>Follow clues to find locations</p>\n</li>\n<li>\n<p>Unlock locations by entering a geofenced area or scanning a QR code</p>\n</li>\n<li>\n<p>View your current location and unlocked spots on a map</p>\n</li>\n<li>\n<p>Track your score and progress through the experience</p>\n</li>\n<li>\n<p>See participant stats for each project/location</p>\n</li>\n</ul>\n<h3>Demo</h3>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/storypath/app_demo.webp\" alt=\"StoryPathAppDemo\"></p>\n<h2>Setup Instructions</h2>\n<p>The app and website <em>can</em> be run locally with the caveat that the API has just\nbeen reimplemented with json-server. And the ChatGPT functionaility won't work\nwithout providing API keys in the .env file.</p>\n<h3>Prerequisites</h3>\n<ul>\n<li>\n<p>Node.js (>= 18.x recommended)</p>\n</li>\n<li>\n<p>Yarn or npm</p>\n</li>\n<li>\n<p>Android Developer Studio (for emulation) or a mobile device with the Expo App\ninstalled.</p>\n</li>\n</ul>\n<h4>Website Setup</h4>\n<pre><code># Clone the repo\ngit clone https://github.com/smp46/StoryPath.git\ncd React\\ Website/\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n</code></pre>\n<p>This starts the web app at <a href=\"http://localhost:5173\">http://localhost:5173</a>.</p>\n<h5>Mobile App Setup</h5>\n<pre><code># Clone the repo\ngit clone https://github.com/smp46/StoryPath.git\ncd React\\ Native/\n\n# Install dependencies\nnpm install\n\n# Start the Expo development server\nnpx expo start\n</code></pre>\n<p>You can scan the QR code from your terminal or browser to open the app on your\nphone using the Expo Go app.</p>\n",
            "url": "https://smp46.me/blog/StoryPath",
            "title": "StoryPath",
            "summary": "StoryPath is a cross-platform experience builder for creating location-based virtual museum exhibits, clue-driven treasure hunts, and interactive tours. Built with React, React Native, and Expo.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2025-04-15T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/UQInc",
            "content_html": "<h1>UQInc: A Rust-Powered UQ Campus Clicker Game</h1>\n<p><a href=\"\"><img src=\"https://img.shields.io/github/downloads/UQInc/UQInc/total.svg\" alt=\"Github All Releases\"></a></p>\n<p>An idle clicker game where you can live your dream of building the University of\nQueensland. Brought to you in Rust.</p>\n<p>Written in 48 Hours for the UQCS 2024 Hackathon, by a team who had never\ndeveloped collaboratively or writtten in Rust.</p>\n<p><img src=\"https://cdn.statically.io/gh/smp46/smp46.me/nextjs/public/assets/uqinc/uqinc.webp?q=85\" alt=\"Screenshot\"></p>\n<h1>How to Run</h1>\n<h3>From Source</h3>\n<p>UQInc requires rust and cargo in order to run. To start, in the terminal run:</p>\n<pre><code>git clone https://github.com/UQInc/UQInc.git\ncd UQInc\ncargo run\n</code></pre>\n<h3>From Pre-Built Executables</h3>\n<p>Pick the executable for your platform\n<a href=\"https://github.com/UQInc/UQInc/releases/\">here</a>!</p>\n<p>From there the game will open and you can begin clicking and buying upgrades to\nplay. Upon completion the buildings menu on the right hand side will be empty\nand the map will be complete. Each building purchase will award 1 perk point\nwhich can be spent in the perks menu to increase the number of students per\nclick and the amount of money you get per student.</p>\n<h1>GUI</h1>\n<p>Made using the macroquad library.</p>\n",
            "url": "https://smp46.me/blog/UQInc",
            "title": "UQInc",
            "summary": "UQInc is a fast-paced idle clicker game built in Rust during the UQCS 2024 Hackathon. Construct your dream University of Queensland campus, upgrade buildings, and earn perks—all within a retro-style GUI built with macroquad.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2024-11-22T00:00:00.000Z"
        },
        {
            "id": "https://smp46.me/blog/dockerImageServer",
            "content_html": "<h1>dockerImageServer: Docker Image Server for Periodic Image Fetching with Nginx</h1>\n<p>This Docker container downloads an image from a specified URL at regular\nintervals and serves it via an Nginx web server. I'm publishing it here in hope\nthat someone else might have a use for it. My use case is fetching a snapshot\nimage from a security camera on my local network and exposing it safely behind a\nnginx web server that can then be put behind a reverse-proxy.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Docker installed on your machine.</li>\n<li>Basic knowledge of Docker command-line usage.</li>\n</ul>\n<h2>Configuration</h2>\n<p>Configuration is handled through environment variables. The following variables\ncan be set:</p>\n<ul>\n<li><code>IMAGE_URL</code>: The URL of the image to be downloaded and served. (Required)</li>\n<li><code>SLEEP_INTERVAL</code>: The interval, in seconds, between each image fetch. Defaults\nto <code>5</code> seconds.</li>\n</ul>\n<h2>Quick Start</h2>\n<p><strong>Docker Run</strong></p>\n<pre><code class=\"language-bash\">  docker run -d -p 8080:80 \\\n  -e IMAGE_URL=your_image_url_here \\\n  -e SLEEP_INTERVAL=10 \\\n  ghcr.io/smp46/dockerimageserver\n</code></pre>\n<p><strong>Docker Compose</strong></p>\n<pre><code class=\"language-yaml\">dockerImageServer:\n  container_name: dockerImageServer\n  ports:\n    - 8080:80\n  image: ghcr.io/smp46/dockerimageserver\n  environment:\n    - IMAGE_URL=your_image_url_here\n    - SLEEP_INTERVAL=10\n  restart: unless-stopped\n</code></pre>\n<p>This will start the container and begin serving the image at\n<a href=\"http://localhost:8080\">http://localhost:8080</a>.</p>\n<h2>Build from Source</h2>\n<ol>\n<li>\n<p><strong>Clone the Repository</strong></p>\n<pre><code class=\"language-bash\">git clone https://github.com/smp46/dockerImageServer\ncd dockerImageServer\n\n</code></pre>\n</li>\n<li>\n<p>Build the Docker Image</p>\n<pre><code class=\"language-bash\">docker build -t dockerimageserver .\n\n</code></pre>\n</li>\n<li>\n<p>Run the Docker Container.</p>\n<p>Replace your_image_url_here with the actual URL of the image you want to\nserve and optionally adjust the SLEEP_INTERVAL.</p>\n<pre><code class=\"language-bash\">docker run -d -p 8080:80 \\\n  -e IMAGE_URL=your_image_url_here \\\n  -e SLEEP_INTERVAL=10 \\\n  dockerimageserver\n</code></pre>\n</li>\n</ol>\n<p>This will start the container and begin serving the image at\n<a href=\"http://localhost:8080\">http://localhost:8080</a>.</p>\n",
            "url": "https://smp46.me/blog/dockerImageServer",
            "title": "dockerImageServer",
            "summary": "dockerImageServer is a lightweight Docker container that periodically downloads an image from a URL and serves it via Nginx. Ideal for use cases like exposing security camera snapshots through a reverse proxy.",
            "date_modified": "2025-05-13T00:00:00.000Z",
            "date_published": "2024-11-22T00:00:00.000Z"
        }
    ]
}